# Práctica en Linux - Paso a Paso

## 1. Ir al directorio personal
Se abrió la terminal y se cambió al directorio personal del usuario (`/home/[usuario]`) para trabajar desde la carpeta base donde se guardarán los archivos de la práctica.  
Se comprobó la ubicación con `pwd` para confirmar que se estaba en el sitio correcto.

---

## 2. Listar archivos iniciales
Se listaron los archivos y carpetas del directorio personal con `ls -l` para verificar el estado inicial y asegurarse de que no hubiera nombres conflictivos antes de crear la estructura de la práctica.

---

## 3. Crear la carpeta principal de la práctica
Se creó una carpeta llamada `Practica_Linux` que servirá como contenedor del trabajo.  
Luego se entró en esa carpeta para realizar todas las operaciones dentro de un entorno ordenado y aislado.

---

## 4. Crear subdirectorios
Dentro de `Practica_Linux` se crearon dos subdirectorios llamados `Documentos` y `Backup`.  
- **Documentos**: para el archivo principal.  
- **Backup**: para guardar una copia de seguridad del mismo.

---

## 5. Crear y editar el archivo de texto
En `Documentos` se creó un archivo vacío llamado `nota.txt` con `touch`.  
Se abrió con el editor de texto `nano` y se escribió:  

"Hola, este es mi primer archivo en Linux"


Después se guardó y cerró el editor.

---

## 6. Copiar el archivo a la carpeta de respaldo
Se hizo una copia de `nota.txt` en el directorio `Backup` para tener una copia de seguridad antes de modificar el archivo original.  
Esto demuestra el uso de operaciones básicas de copia entre directorios (`cp`).

---

## 7. Renombrar el archivo original
El archivo original en `Documentos` se renombró a `nota_final.txt` para reflejar que es la versión final del documento que se trabajó.  
De esta forma, se mantiene un historial (la copia en `Backup`) y una versión final en `Documentos`.

---

## 8. Eliminar el directorio Backup
Se volvió al directorio `Practica_Linux` y se eliminó la carpeta `Backup`.  
- Si estaba vacía: `rmdir Backup`.  
- Si contenía archivos: `rm -r Backup`.  

Esto demuestra la diferencia entre eliminar directorios vacíos y no vacíos.

---

## 9. Mostrar el contenido del archivo final
Se comprobó el contenido de `nota_final.txt` para verificar que la frase escrita estaba presente y correcta, usando `cat`.

---

10. Cambiar permisos del archivo Se modificaron los permisos de nota_final.txt para que sólo el propietario pudiese leer y escribir el archivo (permisión equivalente a rw para el propietario y nada para grupo/otros). Luego se verificó el cambio observando la lista detallada con permisos. 11. Buscar y filtrar archivos Desde el directorio personal se buscó la ubicación de nota_final.txt para confirmar su ruta con una búsqueda por nombre. Además, se empleó una búsqueda de texto dentro de los archivos del directorio Documentos para encontrar la palabra “Linux”, demostrando cómo filtrar por contenido. 12. Gestión de procesos Se abrió el monitor de procesos del sistema (por ejemplo top) para observar procesos en ejecución y se salió de él. Después se creó un proceso en segundo plano con una tarea de espera (sleep) y se mató ese proceso usando su identificador (PID), mostrando cómo gestionar procesos en background y cómo terminarlos. 13. Actualización e instalación de paquetes Se actualizó la lista de paquetes del sistema y se instaló un programa sencillo (cowsay). Esto ilustra el uso de herramientas de gestión de paquetes para mantener el sistema y añadir utilidades. 14. Crear y ejecutar un script final Se creó un script llamado mis_comandos.sh con tres acciones: crear un directorio logs, guardar la salida de la fecha actual en un archivo dentro de logs (por ejemplo fecha.txt) y mostrar un mensaje de finalización utilizando cowsay. Al script se le dio permiso de ejecución y se ejecutó para comprobar que realiza las tres tareas solicitadas.
